#+TITLE: Alter Emacs Config
#+AUTHOR: Zakame
#+DATE: 20160411
#+PROPERTY: header-args:emacs-lisp :results silent

* Intro

Originally, this is just me playing around with abo-abo's
swiper/ivy/counsel packages.  Now, its grown a bit to be its own
configuration to try out other alternatives to some things, not just to
text selection/narrowing, but to code completion, themes, and others.

To use this config, just clone this repo into =~/.emacs.d= then run
Emacs.  To try it out without clobbering your existing =~/.emacs.d=, you
can do this instead:

#+BEGIN_EXAMPLE sh
  $ mkdir -p /path/to/alt/home && cd /path/to/alt/home
  $ git clone https://github.com/zakame/alter-emacs.git .emacs.d
  $ HOME=/path/to/alt/home emacs
#+END_EXAMPLE 

** preface

#+BEGIN_SRC emacs-lisp
  ;; Enable mouse wheel support
  (if (fboundp 'mwheel-install) (mwheel-install))

  ;; Disable menu, tool, and scroll bars
  (mapc (lambda (mode)
          (when (fboundp mode) (funcall mode -1)))
        '(menu-bar-mode tool-bar-mode scroll-bar-mode))

  (setq load-prefer-newer t)              ; Always load newer elisp
  (setq enable-local-eval t)              ; Tell Emacs to obey variables
                                          ; set by the files it reads
  (setq visible-bell t)                   ; Blink the screen instead of
                                          ; beeping
  (set-language-environment "UTF-8")      ; Set my default language
                                          ; environment
  (windmove-default-keybindings)          ; Enable windmove
  (winner-mode 1)                         ; Enable winner-mode
  (auto-image-file-mode 1)                ; Show images as images, not as
                                          ; semi-random bits
  (setq inhibit-startup-message t)        ; No splash screen (well...)

  ;; no fringes too, please!
  (if (fboundp 'fringe-mode) (fringe-mode 0))

  ;; Use spaces, never tabs, on indentation
  (setq-default indent-tabs-mode nil)
#+END_SRC

** package.el

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (nconc package-archives
         '(("melpa" . "https://melpa.org/packages/")
           ("org" . "https://orgmode.org/elpa/")))
  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (progn
      (package-refresh-contents)
      (package-install 'use-package)))
  (eval-when-compile
    (eval-after-load 'advice
      '(setq ad-redefinition-action 'accept))
    (require 'use-package))
  (require 'bind-key)
  (bind-key "C-x c @" 'package-list-packages)
#+END_SRC

** diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

** quelpa

#+BEGIN_SRC emacs-lisp
  (use-package quelpa-use-package
    :ensure t
    :config
    (setq quelpa-checkout-melpa-p nil))
#+END_SRC

* Swiper/Ivy, Counsel, and Avy

** swiper

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :diminish ivy-mode
    :ensure t
    :bind (("C-c C-r" . ivy-resume)
           ("C-x c b" . ivy-resume)
           ("C-c v" . ivy-push-view)
           ("C-c V" . ivy-pop-view))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-height 10
          ivy-count-format "(%d/%d) "
          ivy-wrap t))
#+END_SRC

** counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :init
    (setq counsel-find-file-at-point t)
    :bind (("M-x" . counsel-M-x)
           ("C-s" . counsel-grep-or-swiper)
           ("C-x C-f" . counsel-find-file)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-h b" . counsel-descbinds)
           ("C-c f" . counsel-recentf)
           ("C-c i" . counsel-imenu)
           ("C-x c i" . counsel-imenu)
           ("C-x c c" . counsel-colors-emacs)
           ("C-x c F" . counsel-faces)
           ("C-x c p" . counsel-list-processes)))
#+END_SRC

** ivy tweaks

*** flx fuzzy matching

#+BEGIN_SRC emacs-lisp
  (use-package flx
    :ensure t
    :config
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))
          ivy-initial-inputs-alist nil))
#+END_SRC

** avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (("M-g w" . avy-goto-word-1)
           ("M-g g" . avy-goto-line)
           ("M-g M-g" . avy-goto-line)))
#+END_SRC

* Completion

** company-mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :ensure t
    :bind (:map company-active-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous))
    :config
    (setq company-tooltip-align-annotations t
          company-idle-delay 0.3)
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** quick help popups for completions

#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode 1))
#+END_SRC

* Other editing conveniences

** misc settings

#+BEGIN_SRC emacs-lisp
  ;; I want backups in their own directory, and even backup while in VC
  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backups" user-emacs-directory)))
        vc-make-backup-files t)

  ;; Turn on auto-fill on all major modes
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

  (setq-default fill-column 72)           ; Set default fill-column
  (transient-mark-mode 1)                 ; Show highlight when selecting
                                          ; regions
  (which-function-mode)                   ; show current function/sub in
                                          ; modeline
  (line-number-mode 1)                    ; Show line number ...
  (column-number-mode 1)                  ; ... and column number on
                                          ; modeline
  (show-paren-mode 1)                     ; Automatically makes the
                                          ; matching parenthesis stand out
                                          ; in color
  (setq show-paren-style 'expression)     ; Make the entire matched expression
                                          ; stand out
  (mouse-avoidance-mode 'cat-and-mouse)   ; Move the mouse pointer out
                                          ; of my way when I type
  (temp-buffer-resize-mode 1)             ; Temporary windows should not
                                          ; get into our way
  (auto-compression-mode 1)               ; Load Auto-(De)Compression Mode
  (setq next-line-add-newlines nil)         ; This disables down-arrow and
                                          ; C-n at the end of a buffer
                                          ; from adding a new line to that
                                          ; buffer

  (setq search-whitespace-regexp ".*?")   ; match anything (non-greedy)

  (setq auto-save-timeout 15              ; Auto-save after 15 sec of
                                          ; idleness
        require-final-newline t           ; Always add a newline to file's end
        search-highlight t                ; Highlight search strings
        compilation-window-height 10      ; Set a small window for
                                          ; compiles
        compilation-scroll-output
        'first-error                      ; Follow compilation scrolling
                                          ; until the first error
        compilation-ask-about-save nil)
#+END_SRC

** abbrev

#+BEGIN_SRC emacs-lisp
  (eval-after-load "abbrev"
    '(diminish 'abbrev-mode))
#+END_SRC

** aggressive-indent

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :diminish aggressive-indent-mode
    :config
    (mapc
     (lambda (mode)
       (add-to-list 'aggressive-indent-excluded-modes mode))
     '(cperl-mode html-mode))
    (global-aggressive-indent-mode 1))
#+END_SRC

** auto-fill

#+BEGIN_SRC emacs-lisp
  (eval-after-load "simple"
    '(diminish 'auto-fill-function))
#+END_SRC

** autorevert

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :diminish auto-revert-mode
    :config
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC

** dired

#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-load-hook
            (lambda ()
              (load "dired-x")))
#+END_SRC

** expand-region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)))
#+END_SRC

** hippie-expand

#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :config
    (global-set-key (kbd "M-/") 'hippie-expand)
    (setq hippie-expand-try-functions-list
          '(
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-complete-file-name-partially
            try-complete-file-name
            try-expand-all-abbrevs
            try-expand-list
            try-expand-line
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol)))
#+END_SRC

** hungry-delete

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC

** recentf

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (setq recentf-exclude
          '("TAGS" ".*-autoloads\\.el\\'" ".*-loaddefs\\.el\\'"))
    (recentf-mode))
#+END_SRC

** saveplace

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (unless (version< emacs-version "25")
      (save-place-mode 1))
    (setq-default save-place t
                  save-place-file (expand-file-name ".places"
                                                    user-emacs-directory)))
#+END_SRC

** smartparens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish smartparens-mode
    :ensure t
    :config
    (use-package smartparens-config)
    (smartparens-global-mode 1))
#+END_SRC

** tramp

Enable TRAMP and editing files as root (via sudo) on remote hosts, and
also do not back up tramp files locally:

#+BEGIN_SRC emacs-lisp
  (eval-after-load "tramp"
    '(progn
       (add-to-list 'backup-directory-alist
                    (cons tramp-file-name-regexp nil))
       (setq tramp-default-method "ssh")
       (add-to-list 'tramp-default-proxies-alist
                    '(nil "\\`root\\'" "/ssh:%h:"))
       (add-to-list 'tramp-default-proxies-alist
                    '((regexp-quote (system-name)) nil nil))))
#+END_SRC

** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :ensure t
    :config
    (global-undo-tree-mode 1))
#+END_SRC

** yaml-mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yml$")
#+END_SRC

** widescreen

Make window splits much smarter especially when on widescreen displays

#+BEGIN_SRC emacs-lisp
  (defun zakame/split-window-prefer-side-by-side (window)
    "Split WINDOW, preferably side by side."
    (let ((split-height-threshold (and (< (window-width window)
                                          split-width-threshold)
                                       split-height-threshold)))
      (split-window-sensibly window)))
  (setq split-window-preferred-function
        #'zakame/split-window-prefer-side-by-side)
#+END_SRC

* Git

** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)
           ("M-g b" . magit-blame)
           :map magit-mode-map
           ("v" . endless/visit-pull-request-url)
           :map magit-status-mode-map
           ("q" . zakame/magit-quit-session))
    :init
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun zakame/magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer."
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen)))
#+END_SRC

** forge

#+BEGIN_SRC emacs-lisp
  (use-package forge
    :after magit
    :ensure t)
#+END_SRC

** git-timemachine

#+BEGIN_SRC emacs-lisp
  ;; git-timemachine
  (use-package git-timemachine
    :bind (("M-g t" . git-timemachine))
    :ensure t)
#+END_SRC

** diff-hl

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode)
    (setq diff-hl-side 'left)
    (diff-hl-margin-mode)
    (unless (version<= emacs-version "24.4")
      (diff-hl-flydiff-mode))
    (eval-after-load "magit"
      '(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))
#+END_SRC

* Project manglement

** ggtags

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :diminish ggtags-mode
    :if (executable-find "gtags")
    :init
    (add-hook 'cperl-mode-hook 'ggtags-mode)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1)))))
#+END_SRC

** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy
          projectile-create-missing-test-files t
          projectile-switch-project-action #'projectile-commander)
      (projectile-global-mode))
#+END_SRC

** counsel-projectile

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :after projectile
    :config
    (counsel-projectile-mode))
#+END_SRC

* Syntax checking

** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :ensure t
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

* Lisp

** clojure-mode

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :defer t
    :ensure t
    :config
    (add-hook 'clojure-mode-hook #'smartparens-strict-mode))
#+END_SRC

** CIDER

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :defer t
    :ensure t
    :init
    (setq org-babel-clojure-backend 'cider)
    :config
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (setq nrepl-log-messages t))
#+END_SRC

** eldoc

#+BEGIN_SRC emacs-lisp
  (dolist (hook
           '(emacs-lisp-mode-hook lisp-interaction-mode-hook ielm-mode-hook))
    (add-hook hook #'eldoc-mode))
  (eval-after-load "eldoc"
    '(diminish 'eldoc-mode))
#+END_SRC

* Java (Android)

** android-mode

#+BEGIN_SRC emacs-lisp
  (use-package android-mode
    :ensure t
    :config
    (setq android-mode-builder 'gradle))
#+END_SRC

** groovy-mode

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure t
    :mode "\\.gradle\\'")
#+END_SRC

* Perl

** cperl-mode

#+BEGIN_SRC emacs-lisp
  (use-package cperl-mode
    :mode "\\.\\([pP]\\([Llm]\\|erl\\|od\\|sgi\\)\\|al\\|t\\)\\'"
    :preface
    (defalias 'perl-mode 'cperl-mode)
    :config
    (cperl-lazy-install)
    (setq cperl-invalid-face nil
          cperl-indent-level 4
          cperl-indent-parens-as-block t
          cperl-close-paren-offset -4
          cperl-continued-statement-offset 4
          cperl-tab-always-indent t
          cperl-lazy-help-time 2)
    (dolist (face '(cperl-array-face cperl-hash-face))
      (set-face-attribute face nil
                          :background 'unspecified)))
#+END_SRC

** perltidy

=tramp-tramp-file-p= is autoloaded here as perltidy tests for TRAMP
buffers.

#+BEGIN_SRC emacs-lisp
  (use-package perltidy
    :quelpa (perltidy
             :fetcher url
             :url "https://www.emacswiki.org/emacs/download/perltidy.el")
    :after cperl-mode
    :init
    (autoload 'tramp-tramp-file-p "tramp")
    :bind (:map cperl-mode-map
                ("C-c <tab> r" . perltidy-region)
                ("C-c <tab> b" . perltidy-buffer)
                ("C-c <tab> s" . perltidy-subroutine)
                ("C-c <tab> t" . perltidy-dwim-safe)))
#+END_SRC

** Pod-mode

#+BEGIN_SRC emacs-lisp
  (use-package pod-mode
    :mode "\\.[pP]od\\'"
    :quelpa (pod-mode :fetcher github :repo "renormalist/emacs-pod-mode"))
#+END_SRC

** CPANFile-mode

#+BEGIN_SRC emacs-lisp
  (use-package cpanfile-mode
    :ensure t)
#+END_SRC

** Perl-Reply

#+BEGIN_SRC emacs-lisp
  (use-package reply
    :quelpa (reply :fetcher github :repo "syohex/emacs-reply" )
    :after cperl-mode
    :config
    (defun zakame/reply-sentinel (process event)
      (if (memq (process-status process) '(signal exit))
          (let ((buffer (process-buffer process)))
            (kill-buffer buffer))))
    (defadvice run-reply (around reply-set-process-sentinel activate)
      ad-do-it
      (set-process-sentinel (get-process "reply") 'zakame/reply-sentinel))
    (ad-activate 'run-reply)
    (defun zakame/reply-other-window ()
      "Run `reply' on other window."
      (interactive)
      (switch-to-buffer-other-window (get-buffer-create "*reply*"))
      (run-reply "reply"))
    :bind (:map cperl-mode-map
                ("C-c r r" . run-reply)
                ("C-c r C-r" . reply-send-region)
                ("C-c r C-z" . zakame/reply-other-window)))
#+END_SRC

** PlSense

Requires https://github.com/aki2o/plsense

#+BEGIN_SRC emacs-lisp
  (use-package plsense
    :ensure t
    :config
    (plsense-config-default))
#+END_SRC

PlSense pulls in auto-complete-mode, so customize that:

#+BEGIN_SRC emacs-lisp
  (eval-after-load "auto-complete"
    '(progn
       (diminish 'auto-complete-mode)
       (setq ac-use-menu-map t)))
#+END_SRC

* PHP

** php-mode

#+BEGIN_SRC emacs-lisp
  ;; php-mode
  (use-package php-mode
    :ensure t
    :mode "\\.php\\'")
#+END_SRC

* Shell and Terminal Emulation

** ansi-term

#+BEGIN_SRC emacs-lisp
  (use-package term
    :bind (("C-c t" . ansi-term))
    :config
    (defadvice term-sentinel (around ansi-term-kill-buffer (proc msg))
      (if (memq (process-status proc) '(signal exit))
          (let ((buffer (process-buffer proc)))
            ad-do-it
            (kill-buffer buffer))
        ad-do-it))
    (ad-activate 'term-sentinel)
    (defadvice ansi-term (before ansi-term-force-shell)
      (interactive (list (getenv "SHELL"))))
    (ad-activate 'ansi-term)
    (add-hook 'term-mode-hook 'goto-address-mode)
    (add-hook 'term-exec-hook
              '(lambda ()
                 (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))))
#+END_SRC

** eshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :bind (("C-c e" . eshell))
    :config
    (defun zakame/eshell-rename-buffer-before-command ()
      (let* ((last-input
              (buffer-substring eshell-last-input-start eshell-last-input-end)))
        (rename-buffer
         (format "*eshell[%s]$ %s...*" default-directory last-input) t)))
    (defun zakame/eshell-rename-buffer-after-command ()
      (rename-buffer
       (format "*eshell[%s]$ %s*" default-directory
               (eshell-previous-input-string 0)) t))
    (add-hook 'eshell-pre-command-hook
              'zakame/eshell-rename-buffer-before-command)
    (add-hook 'eshell-post-command-hook
              'zakame/eshell-rename-buffer-after-command)
    (use-package em-smart)
    (setq eshell-where-to-jump 'begin
          eshell-review-quick-commands nil
          eshell-smart-space-goes-to-end t)
    (add-hook 'eshell-mode-hook
              (lambda ()
                (eshell-smart-initialize))))
#+END_SRC

* OrgMode

** org-plus-contrib

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :mode ("\\.\\(org\\|org_archive\\)$" . org-mode)
    :bind (("\C-cl" . org-store-link)
           ("\C-cc" . org-capture)
           ("\C-ca" . org-agenda)
           ("\C-cb" . org-iswitchb))
    :init
    ;; enable org-bullets
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode 1)))
    (setq org-ellipsis " ▼")
    ;; make windmove work well with org-mode
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right))
#+END_SRC

** ob-http

This allows using =curl= inside Org Babel code blocks, e.g.

#+BEGIN_EXAMPLE
#+BEGIN_SRC http :pretty
  GET https://api.github.com/repos/zweifisch/ob-http/languages
  Accept: application/vnd.github.v3+json
#+END_SRC

#+RESULTS:
: {
:   "Emacs Lisp": 13709,
:   "Shell": 139
: }
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package ob-http
    :after org
    :ensure t
    :config
    (add-to-list 'org-babel-load-languages '(http . t))
    (org-babel-do-load-languages
     'org-babel-load-languages org-babel-load-languages))
#+END_SRC

* Look and feel

** tomorrow-80's theme

#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config
    (load-theme 'sanityinc-tomorrow-eighties t))
#+END_SRC

Fix up foreground color in org-mode source blocks:

#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(set-face-attribute 'org-block nil
                         :foreground 'unspecified))
#+END_SRC

** rainbow-delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (dolist (hook '(prog-mode-hook java-mode-hook cperl-mode-hook))
      (add-hook hook #'rainbow-delimiters-mode))
    :config
    (setq rainbow-delimiters-max-face-count 1)
    (set-face-attribute 'rainbow-delimiters-depth-1-face nil
                        :foreground "dim gray")
    (dolist (face '(rainbow-delimiters-unmatched-face
                    rainbow-delimiters-mismatched-face))
      (set-face-attribute face nil
                          :foreground 'unspecified
                          :inherit 'error)))
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

* Finis

** Load local customizations

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** report startup time

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (delete-other-windows)
              (message (emacs-init-time))))
#+END_SRC

* LICENSE

#+BEGIN_QUOTE
This file is NOT part of GNU Emacs.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#+END_QUOTE
